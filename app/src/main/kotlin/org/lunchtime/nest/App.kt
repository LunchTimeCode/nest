/*
 * This source file was generated by the Gradle 'init' task
 */
package org.lunchtime.nest

import io.github.oshai.kotlinlogging.KotlinLogging
import kotlinx.coroutines.cancel
import kotlinx.coroutines.coroutineScope
import org.http4k.core.Method
import org.http4k.core.Response
import org.http4k.core.Status
import org.http4k.routing.RoutingHttpHandler
import org.http4k.routing.bind
import org.http4k.routing.routes
import org.http4k.server.KtorCIO
import org.http4k.server.ServerConfig
import org.http4k.server.asServer
import kotlin.time.measureTimedValue
import org.http4k.core.Filter
import org.http4k.core.HttpHandler

private const val DEFAULT_PORT = 9998
val serverPort by lazy { System.getenv("SERVER_PORT")?.toInt() ?: DEFAULT_PORT }

private val log = KotlinLogging.logger { }

suspend fun main() {
    coroutineScope {
        val runtime = ServerRuntime.KtorCIO
        log.info { "Server runtime: ${runtime.name}" }

        val server = buildApp().asServer(runtime.config(serverPort)).start()

        log.info { "Listening on http://0.0.0.0:$serverPort" }

        server.block()

        cancel()
    }
}

@Suppress("LongMethod")
private fun buildApp(): RoutingHttpHandler =
    routes(
        routes(
            "healthz" bind Method.GET to { Response(Status.NO_CONTENT) },
        ).withBasePath("api")
    ).withFilter(
       ResponseLogger
    )


private enum class ServerRuntime(
    val config: (port: Int) -> ServerConfig,
) {
    KtorCIO(::KtorCIO),
}

object ResponseLogger : Filter {
    private val log = KotlinLogging.logger { }

    override fun invoke(next: HttpHandler): HttpHandler = { req ->
        val (resp, duration) = measureTimedValue { next(req) }
        val message = { "${req.method} ${req.uri} -> ${resp.status} $duration" }
        if (resp.status.let { it.redirection || it.successful || it.informational }) {
            log.debug(message)
        } else if (resp.status.clientError) {
            log.warn(message)
        } else {
            log.error(message)
        }
        resp
    }
}